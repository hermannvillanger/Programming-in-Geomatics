{"version":3,"sources":["components/util/constants.js","components/layer.jsx","components/util/support.js","components/layerproperties.jsx","components/layerlist.jsx","components/processingfield.jsx","components/processingtemplate.jsx","components/processing/attributeselector.jsx","components/processing/operationtypes.js","components/processing/buffer.js","components/processing/difference.js","components/processing/intersection.js","components/processing/union.js","App.js","components/geoprocessing.jsx","components/upload.jsx","components/sidebar.jsx","components/leafletmap.jsx","registerServiceWorker.js","index.js","images/icondelete.svg","images/iconzoom.svg","images/iconsettings.svg","images/iconinfo.svg","images/buffer.png","images/intersection.png","images/union.png","images/difference.png"],"names":["SHAPE_FORMATS","ItemTypes","InputTypes","PropTypes","number","isRequired","string","object","boolean","Actions","delete","zoom","properties","Layer","handleClick","action","_this","props","onDelete","layer","id","onZoom","openPopup","createContexMenu","react_default","a","createElement","es6","index","toString","createContexMenuItem","settingsIcon","divider","zoomIcon","deleteIcon","description","icon","onClick","src","className","alt","_this2","this","_this$props","isDragging","isOver","connectDragSource","connectDropTarget","style","opacity","backgroundColor","holdToDisplay","name","height","width","float","color","type","checked","visible","onChange","onToggle","Component","flow","DragSource","beginDrag","draggedId","draggedIndex","draggedName","draggedData","data","connect","monitor","dragSource","DropTarget","canDrop","getItem","drop","didDrop","onMove","dropTarget","validateNumberInput","inputValue","defaultValue","length","newValue","i","char","charAt","isNaN","Number","InputValues","Properties","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTextInput","evt","inputName","target","value","setState","prevState","inputs","set","handleRangeInput","min","max","String","ValidateRangeInput","applyChanges","onNameChange","state","get","onStyleChange","removeDialogue","onDialogueFinished","createPage","Fragment","textInput","colorInput","rangeInput","onEdit","Map","LayerList","stylemap","closePopup","reactjs_popup_es","open","modal","onClose","layerproperties","layerlist","map","components_layer","key","visiblemap","ProcessingField","hasLayer","canMove","inputLayers","border","cursor","canDrag","_monitor$getItem2","onDrop","ProcessingTemplate","getDefaultValues","inputValues","defaultInputs","forEach","push","defaultInput","createInputFields","operation","inputFields","createInputField","inputType","splice","event","handleInputValue","createLayerFields","processingfield","layers","onSwap","handleSwap","handleDrop","position","checkLayers","indexOf","find","currentIndex","nextIndex","handleReset","Array","fill","processing","processingStart","_this$state","undefined","canProcess","popup","startProcessing","script","processFinished","onProcessingDone","alert","listOpen","PopupComponent","popupComponent","onExecute","info","trigger","infoIcon","on","disabled","ComparisonMethods","equal","notEqual","greater","less","greaterEqual","lessEqual","AttributeType","property","operator","AttributeSelector","loadAttributes","featureID","features","feature","setDataType","dataTypes","assign","checkFilters","newName","extractedLayer","fulfill","filterID","filters","filter","fulfillCriteria","onCancel","addSelectField","firstProperty","keys","getFilterForProperty","getLegalComparators","dataType","values","deleteSelection","pos","handleSelectionUpdate","createSelectFields","selectFields","comparators","createSelectField","valueChoices","defaultChoice","handleNameChange","operations","createInputValue","bufferValue","shouldDissolve","bufferLayer","buffer","units","dissolvedFeature","union","geometryChanged","bufferImg","layer1","layer2","resultLayer","resultData","buffer1","buffer2","nextFeature","j","difference","differenceImg","feature1","feature2","intersectPolygon","intersect","intersectionImg","unionImg","db","componentOperations","Geoprocessing","handleToggle","createProcessingTemplate","processingtemplate","Upload","handleUpload","files","shapeFiles","gmlFiles","geoJsonFiles","file","filename","toLowerCase","endsWith","format","onUpload","es","accept","SideBar","geoprocessing","upload","LeafletMap","mapid","center","zoomToLayer","getLayerById","fitBounds","getBounds","addLayer","leaflayer","L","geoJSON","featuregroup","e","onError","removeLayer","getLayers","createMap","featureGroup","addTo","setView","tileLayer","attribution","zoomControl","setPosition","setStyle","bringToBack","DB_NAME","LAYER_STORE","DB_VERSION","App","dbInit","request","indexedDB","onerror","onupgradeneeded","result","createObjectStore","keyPath","autoIncrement","onsuccess","loadLayers","transaction","objectStore","getAll","addGeoJSONLayer","json","reader","FileReader","onload","datatext","JSON","parse","replace","localSave","ex","readAsText","put","console","log","styles","visibility","x","Math","round","random","y","substring","getColor","handleDelete","deleteFromStorage","deleteFromState","deleteFromLeaflet","handleZoom","leafletmap","current","handleStyleChange","prevStyle","l","handleError","handleMove","newIndex","layerInfo","arraylist","t","getInfo","handleProcessing","React","createRef","close","components_sidebar","ref","DragDropContext","HTML5Backend","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2ed6fb7b.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n/**\r\n * Class for global constants\r\n */\r\nexport const ACCEPTED_FILE_TYPES =\r\n  \".geojson, .gml, .dbf, .prj, .sbn, .sbx, .shp, .shx, .shp.xml\";\r\nexport const SHAPE_FORMATS = [\r\n  \".shp\",\r\n  \".dbf\",\r\n  \".prj\",\r\n  \".sbn\",\r\n  \".sbx\",\r\n  \".shx\",\r\n  \".shp.xml\"\r\n];\r\n/**\r\n * Targets and sources for drag and drop functionality.\r\n * Use these keywords when making draggable layer,\r\n * a droppable field for layers in an operation etc...\r\n */\r\nexport const ItemTypes = {\r\n  LAYER: \"layer\",\r\n  OPERATION: \"operation\"\r\n};\r\n/**\r\n * Proptypes template for layers\r\n */\r\nexport const LayerShape = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  data: PropTypes.object.isRequired\r\n};\r\n/**\r\n * Proptypes template for operations\r\n */\r\nexport const OperationShape = {\r\n  name: PropTypes.string.isRequired,\r\n  inputLayers: PropTypes.number.isRequired\r\n};\r\n/**\r\n * Object of string containing all valid inputtypes of user data\r\n */\r\nexport const InputTypes = {\r\n  number: \"number\",\r\n  boolean: \"boolean\",\r\n  string: \"string\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { DragSource, DropTarget } from \"react-dnd\";\r\nimport { ItemTypes, LayerShape } from \"./util/constants\";\r\nimport \"./css/sidebar.css\";\r\nimport \"./css/contextmenu.css\";\r\nimport \"./css/popup.css\";\r\n\r\nimport flow from \"lodash/flow\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport zoomIcon from \"../images/iconzoom.svg\";\r\nimport settingsIcon from \"../images/iconsettings.svg\";\r\nimport deleteIcon from \"../images/icondelete.svg\";\r\n\r\n/**\r\n * The different actions in the layers right click menu\r\n */\r\nconst Actions = {\r\n  delete: \"delete\",\r\n  zoom: \"zoom\",\r\n  properties: \"properties\"\r\n};\r\n\r\n/**\r\n * Also must be dropped in processingfield. Use itemtypes operation for that\r\n */\r\nconst layerSource = {\r\n  beginDrag(props) {\r\n    const item = {\r\n      draggedId: props.layer.id,\r\n      draggedIndex: props.index,\r\n      draggedName: props.layer.name,\r\n      draggedData: props.layer.data\r\n    };\r\n    return item;\r\n  }\r\n};\r\nconst layerTarget = {\r\n  //Cannot drop on the same layer\r\n  canDrop(props, monitor) {\r\n    let { draggedId } = monitor.getItem();\r\n    return draggedId !== props.layer.id;\r\n  },\r\n  //App handles sorting of the layer list\r\n  drop(props, monitor) {\r\n    if (!monitor.didDrop()) {\r\n      let { draggedId } = monitor.getItem();\r\n      props.onMove(draggedId, props.index);\r\n    }\r\n  }\r\n};\r\n\r\nfunction collectTarget(connect, monitor) {\r\n  return {\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver()\r\n  };\r\n}\r\nfunction collectSource(connect, monitor) {\r\n  return {\r\n    connectDragSource: connect.dragSource(),\r\n    isDragging: monitor.isDragging()\r\n  };\r\n}\r\n/**\r\n * Class for visualizing the geojson layer in the sidebar\r\n */\r\nclass Layer extends Component {\r\n  /**\r\n   * Method to decide which item was clicked and perform corresponding action\r\n   */\r\n  handleClick = action => {\r\n    if (action === Actions.delete) {\r\n      this.props.onDelete(this.props.layer.id);\r\n    } else if (action === Actions.zoom) {\r\n      this.props.onZoom(this.props.layer.id);\r\n    } else if (action === Actions.properties) {\r\n      this.props.openPopup(this.props.layer);\r\n    }\r\n  };\r\n  /**\r\n   * Creates right click menu for render function.\r\n   * Uses createContexMenuItem for every item in the list\r\n   */\r\n  createContexMenu = () => {\r\n    return (\r\n      <div>\r\n        <ContextMenu id={this.props.index.toString()}>\r\n          {this.createContexMenuItem(\r\n            Actions.properties,\r\n            \"Properties\",\r\n            settingsIcon\r\n          )}\r\n          <MenuItem divider />\r\n          {this.createContexMenuItem(Actions.zoom, \"Zoom to layer\", zoomIcon)}\r\n          <MenuItem divider />\r\n          {this.createContexMenuItem(\r\n            Actions.delete,\r\n            \"Delete layer\",\r\n            deleteIcon\r\n          )}\r\n        </ContextMenu>\r\n      </div>\r\n    );\r\n  };\r\n  /**\r\n   * Each item in the right click menu\r\n   * Has onClick function, description and a small icon\r\n   */\r\n  createContexMenuItem = (action, description, icon) => {\r\n    return (\r\n      <MenuItem onClick={() => this.handleClick(action)}>\r\n        {description}\r\n        <img src={icon} className=\"icon\" alt=\"\" />\r\n      </MenuItem>\r\n    );\r\n  };\r\n  /**\r\n   * Render function\r\n   * Contains right click menu with options\r\n   * Name of layer\r\n   * Square with color of layer\r\n   * Checkbox for toggling visibility\r\n   */\r\n  render() {\r\n    const {\r\n      isDragging,\r\n      isOver,\r\n      connectDragSource,\r\n      connectDropTarget\r\n    } = this.props;\r\n    return connectDragSource(\r\n      connectDropTarget(\r\n        <div\r\n          className=\"layer\"\r\n          style={{\r\n            opacity: isDragging ? 0 : 1,\r\n            backgroundColor: isOver\r\n              ? \"rgb(120, 120, 120)\"\r\n              : \"rgb(217, 217, 217)\"\r\n          }}\r\n        >\r\n          <ContextMenuTrigger\r\n            id={this.props.index.toString()}\r\n            holdToDisplay={-1}\r\n          >\r\n            <span>{this.props.layer.name}</span>\r\n            {/*FIXME: Overflow of name/Size */}\r\n            <div\r\n              style={{\r\n                height: \"20px\",\r\n                width: \"20px\",\r\n                float: \"left\",\r\n                backgroundColor: this.props.style.color\r\n              }}\r\n            />\r\n            <input\r\n              type=\"checkbox\"\r\n              style={{ float: \"right\" }}\r\n              checked={this.props.visible}\r\n              onChange={() => this.props.onToggle(this.props.layer.id)}\r\n            />\r\n          </ContextMenuTrigger>\r\n          {this.createContexMenu()}\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nLayer.propTypes = {\r\n  layer: PropTypes.shape(LayerShape).isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  isDragging: PropTypes.bool.isRequired,\r\n  isOver: PropTypes.bool.isRequired,\r\n  onMove: PropTypes.func\r\n};\r\n\r\nexport default flow(\r\n  DragSource(ItemTypes.LAYER, layerSource, collectSource),\r\n  DropTarget(ItemTypes.LAYER, layerTarget, collectTarget)\r\n)(Layer);\r\n","/**\r\n * Returns the index and content of the object with matching id in arraylist\r\n * @param {*} id\r\n * @param {*} arraylist\r\n */\r\nexport function getInfo(id, arraylist) {\r\n  const target = arraylist.find(t => t.id === id);\r\n  const index = arraylist.indexOf(target);\r\n  return { index: index, info: target };\r\n}\r\n\r\n/**\r\n * Gives a random color to a layer\r\n */\r\nexport function getColor(id) {\r\n  var x = Math.round(0xffffff * Math.random()).toString(16);\r\n  var y = 6 - x.length;\r\n  var z = \"000000\";\r\n  var z1 = z.substring(0, y);\r\n  return \"#\" + z1 + x;\r\n}\r\n/**\r\n * Checks if the input is a number, removes all parts of the inputvalue which are not numbers\r\n * Currently returns empty string if input is empty. Can return defaultvalue instead\r\n */\r\nexport function validateNumberInput(inputValue, defaultValue) {\r\n  if (inputValue.length === 0) {\r\n    return \"\";\r\n  }\r\n  let newValue = \"\";\r\n  for (let i = 0; i < inputValue.length; i++) {\r\n    let char = inputValue.charAt(i);\r\n    //Check if the char is a number\r\n    if (!isNaN(Number(char))) {\r\n      newValue += char;\r\n    }\r\n  }\r\n  return newValue.length > 0\r\n    ? Number(newValue)\r\n    : defaultValue !== null\r\n    ? defaultValue\r\n    : \"\";\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./css/sidebar.css\";\r\nimport { validateNumberInput } from \"./util/support.js\";\r\nconst InputValues = {\r\n  name: \"Name: \",\r\n  color: \"Color: \",\r\n  opacity: \"Opacity: \"\r\n};\r\n/**\r\n * Class for the popup menu which allows changing properties of a layer\r\n */\r\nclass Properties extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //Map input type to inputvalue\r\n    const inputs = new Map([\r\n      [InputValues.name, props.layer.name],\r\n      [InputValues.color, props.style.color],\r\n      [InputValues.opacity, props.style.opacity]\r\n    ]);\r\n    this.state = {\r\n      inputs: inputs\r\n    };\r\n  }\r\n  /**\r\n   * How textinput should be handled. Can check if the input is valid, nonempty...\r\n   */\r\n  handleTextInput = (evt, inputName, defaultValue) => {\r\n    let newValue = evt.target.value;\r\n    this.setState(prevState => {\r\n      return { inputs: prevState.inputs.set(inputName, newValue) };\r\n    });\r\n  };\r\n  /**\r\n   * Handle numerical input with min and max value.\r\n   * Remove all non-numerical values from input, check if remainder is not empty.\r\n   * If not empty, compare to min and max, if empty set as empty string\r\n   */\r\n  handleRangeInput = (evt, inputName, defaultValue, min, max) => {\r\n    let newValue = validateNumberInput(evt.target.value, defaultValue);\r\n    newValue =\r\n      String(newValue).length > 0\r\n        ? this.ValidateRangeInput(newValue / 100, defaultValue, min, max)\r\n        : \"\";\r\n    this.setState(prevState => {\r\n      return { inputs: prevState.inputs.set(inputName, newValue) };\r\n    });\r\n  };\r\n  /**\r\n   * Checks if inputValue is within the constraints. If not, returns max or min values\r\n   */\r\n  ValidateRangeInput = (inputValue, defaultValue, min, max) => {\r\n    if (Number(inputValue) < min) {\r\n      inputValue = min;\r\n    } else if (Number(inputValue) > max) {\r\n      inputValue = max;\r\n    }\r\n    return inputValue;\r\n  };\r\n  /**\r\n   * Calls App with changes to properties the user have entered.\r\n   * Validation is done in App component, we send null if the field should not be changes\r\n   */\r\n  applyChanges = () => {\r\n    this.props.onNameChange(\r\n      this.props.layer,\r\n      this.state.inputs.get(InputValues.name)\r\n    );\r\n    const color = this.state.inputs.get(InputValues.color);\r\n    const opacity = this.state.inputs.get(InputValues.opacity);\r\n    this.props.onStyleChange(this.props.layer.id, {\r\n      color: color.length > 0 ? color : null,\r\n      opacity: String(opacity).length > 0 ? opacity : null\r\n    });\r\n    this.removeDialogue();\r\n  };\r\n  /**\r\n   * Call parent to close properties popup\r\n   */\r\n  removeDialogue = () => {\r\n    this.props.onDialogueFinished();\r\n  };\r\n  /**\r\n   * Create the content of properties menu.\r\n   * Contains each property and a field for changing them in a vertial list\r\n   */\r\n  createPage = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {this.textInput(\r\n          InputValues.name,\r\n          this.state.inputs.get(InputValues.name),\r\n          this.handleTextInput\r\n        )}\r\n        {this.colorInput(\r\n          InputValues.color,\r\n          this.state.inputs.get(InputValues.color),\r\n          this.handleTextInput\r\n        )}\r\n        {this.rangeInput(\r\n          InputValues.opacity,\r\n          String(this.state.inputs.get(InputValues.opacity)).length > 0\r\n            ? this.state.inputs.get(InputValues.opacity) * 100\r\n            : \"\",\r\n          0,\r\n          1,\r\n          this.handleRangeInput\r\n        )}\r\n        <button onClick={this.removeDialogue}>Cancel</button>\r\n        <button onClick={this.applyChanges}>Apply</button>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  textInput = (inputName, defaultValue, onEdit) => {\r\n    return (\r\n      <div>\r\n        {inputName}\r\n        <input\r\n          type=\"text\"\r\n          value={defaultValue}\r\n          onChange={evt => onEdit(evt, inputName, defaultValue)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  rangeInput = (inputName, defaultValue, min, max, onEdit) => {\r\n    return (\r\n      <div>\r\n        {inputName}\r\n        <input\r\n          type=\"text\"\r\n          style={{ width: \"50px\" }}\r\n          value={defaultValue}\r\n          onChange={evt => onEdit(evt, inputName, defaultValue, min, max)}\r\n        />\r\n        {\"%\"}\r\n      </div>\r\n    );\r\n  };\r\n  colorInput = (inputName, defaultValue, onEdit) => {\r\n    return (\r\n      <div>\r\n        {inputName}\r\n        <input\r\n          type=\"color\"\r\n          value={defaultValue}\r\n          onChange={evt => onEdit(evt, inputName, defaultValue)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"properties-menu\">\r\n        {\"Layer properties\"}\r\n        {this.createPage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Properties;\r\n","import React, { Component } from \"react\";\r\nimport Layer from \"./layer\";\r\nimport \"./css/sidebar.css\";\r\nimport \"./css/popup.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LayerShape } from \"./util/constants.js\";\r\nimport Properties from \"./layerproperties\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\n/**\r\n * Class for listing all layers in the sidebar. Contains all layers\r\n */\r\nclass LayerList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openPopup: false,\r\n      layer: null,\r\n      style: null\r\n    };\r\n  }\r\n  /**\r\n   * Open properties popup for specific layer\r\n   */\r\n  openPopup = layer => {\r\n    this.setState({\r\n      openPopup: true,\r\n      layer: layer,\r\n      style: this.props.stylemap.get(layer.id)\r\n    });\r\n  };\r\n  closePopup = () => {\r\n    this.setState({\r\n      openPopup: false,\r\n      layer: null,\r\n      style: null\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render function\r\n   * Contains popup with layer properties\r\n   * All layers in a vertical list under the title\r\n   */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"group-divider\">Layers</div>\r\n        <Popup open={this.state.openPopup} modal onClose={this.closePopup}>\r\n          <Properties\r\n            layer={this.state.layer}\r\n            style={this.state.style}\r\n            onNameChange={this.props.onNameChange}\r\n            onStyleChange={this.props.onStyleChange}\r\n            onDialogueFinished={this.closePopup}\r\n          />\r\n        </Popup>\r\n        {this.props.layerlist.map((layer, index) => (\r\n          <Layer\r\n            key={layer.id}\r\n            index={index}\r\n            layer={layer}\r\n            visible={this.props.visiblemap.get(layer.id)}\r\n            style={this.props.stylemap.get(layer.id)}\r\n            onDelete={this.props.onDelete}\r\n            onToggle={this.props.onToggle}\r\n            onMove={this.props.onMove}\r\n            onZoom={this.props.onZoom}\r\n            openPopup={this.openPopup}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLayerList.propTypes = {\r\n  layerlist: PropTypes.arrayOf(PropTypes.shape(LayerShape)),\r\n  visiblemap: PropTypes.instanceOf(Map).isRequired,\r\n  onMove: PropTypes.func.isRequired,\r\n  layer: PropTypes.shape(LayerShape),\r\n  index: PropTypes.number,\r\n  visible: PropTypes.bool\r\n};\r\n\r\nexport default LayerList;\r\n","import React, { Component } from \"react\";\r\nimport { DragSource, DropTarget } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes, LayerShape } from \"./util/constants.js\";\r\nimport flow from \"lodash/flow\";\r\nimport \"./css/sidebar.css\";\r\n\r\nconst operationSource = {\r\n  //The dragged item has id, name and data of layer\r\n  beginDrag(props) {\r\n    const item = {\r\n      draggedId: props.layer.id,\r\n      draggedName: props.layer.name,\r\n      draggedData: props.layer.data\r\n    };\r\n    return item;\r\n  },\r\n  //Can not drag if one one possible layer, or if no layer is present\r\n  canDrag(props) {\r\n    if (props.inputLayers > 1) {\r\n      return props.layer !== null;\r\n    }\r\n    return false;\r\n  }\r\n};\r\nconst operationTarget = {\r\n  //Can drop if the field is empty, or if the layer has a different id from the dragged layer\r\n  canDrop(props, monitor) {\r\n    if (props.layer === null) {\r\n      return true;\r\n    }\r\n    const { draggedId } = monitor.getItem();\r\n    return props.layer.id !== draggedId;\r\n  },\r\n  //Template handles the drop logic in its handleDrop function\r\n  drop(props, monitor) {\r\n    if (!monitor.didDrop()) {\r\n      const { draggedId, draggedName, draggedData } = monitor.getItem();\r\n      const layer = { id: draggedId, name: draggedName, data: draggedData };\r\n      props.onDrop(layer, props.index);\r\n    }\r\n  }\r\n};\r\n\r\nfunction collectTarget(connect, monitor) {\r\n  return {\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver()\r\n  };\r\n}\r\nfunction collectSource(connect, monitor) {\r\n  return {\r\n    connectDragSource: connect.dragSource(),\r\n    isDragging: monitor.isDragging()\r\n  };\r\n}\r\n/**\r\n * Class for the droppable layer field in each operation.\r\n * Layers can be dropped from the layer list or from other processingfields\r\n */\r\nclass ProcessingField extends Component {\r\n  /**\r\n   * Render function\r\n   * Contains a field which layers can be dropped on\r\n   */\r\n  render() {\r\n    const {\r\n      isDragging,\r\n      isOver,\r\n      connectDragSource,\r\n      connectDropTarget\r\n    } = this.props;\r\n    const hasLayer = this.props.layer !== null;\r\n    const canMove = hasLayer && this.props.inputLayers > 1;\r\n\r\n    return connectDragSource(\r\n      connectDropTarget(\r\n        <div\r\n          className=\"processing-field\"\r\n          style={{\r\n            opacity: isDragging ? 0 : isOver ? 0.8 : 1,\r\n            border: !hasLayer ? \"2px dotted black\" : \"2px solid black\",\r\n            cursor: canMove ? \"pointer\" : \"default\"\r\n          }}\r\n        >\r\n          {(!hasLayer && \"Drop layer \" + (this.props.index + 1) + \" here\") ||\r\n            (hasLayer && this.props.layer.name)}\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nProcessingField.propTypes = {\r\n  layer: PropTypes.shape(LayerShape),\r\n  hasLayer: PropTypes.bool,\r\n  isDragging: PropTypes.bool,\r\n  isOver: PropTypes.bool,\r\n  inputLayers: PropTypes.number.isRequired\r\n};\r\n\r\nexport default flow(\r\n  DragSource(ItemTypes.OPERATION, operationSource, collectSource),\r\n  DropTarget(\r\n    [ItemTypes.LAYER, ItemTypes.OPERATION],\r\n    operationTarget,\r\n    collectTarget\r\n  )\r\n)(ProcessingField);\r\n","import React, { Component } from \"react\";\r\nimport ProcessingField from \"./processingfield\";\r\nimport PropTypes from \"prop-types\";\r\nimport { OperationShape, LayerShape, InputTypes } from \"./util/constants\";\r\nimport \"./css/sidebar.css\";\r\nimport \"./css/popup.css\";\r\nimport { validateNumberInput } from \"./util/support.js\";\r\nimport infoIcon from \"../images/iconinfo.svg\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\n/**\r\n * Base class for operations in the sidebar. Creates inputfields\r\n * and initiates the processing operation on the input layers\r\n */\r\nclass ProcessingTemplate extends Component {\r\n  /**\r\n   * Populates the template with default values for user input, if required,\r\n   * and array for inputlayers\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    const defaultInputs = this.getDefaultValues(props.operation.inputValues);\r\n    this.state = {\r\n      layers: new Array(props.operation.inputLayers).fill(null),\r\n      inputs: defaultInputs,\r\n      processing: false\r\n    };\r\n  }\r\n  /**\r\n   * Returns array of all default inputvalues for the inputfields, or null if no inputvalues\r\n   */\r\n  getDefaultValues = inputValues => {\r\n    let defaultInputs = null;\r\n    if (inputValues) {\r\n      defaultInputs = [];\r\n      inputValues.forEach(inputValue => {\r\n        defaultInputs.push(\r\n          inputValue.defaultInput !== null ? inputValue.defaultInput : \"\"\r\n        );\r\n      });\r\n    }\r\n    return defaultInputs;\r\n  };\r\n  /**\r\n   * If the operation requires input in addition to the layers, create corresponding\r\n   * fields for user input here\r\n   */\r\n  createInputFields = () => {\r\n    const { inputValues } = this.props.operation;\r\n    let inputFields = null;\r\n    if (inputValues) {\r\n      inputFields = [];\r\n      inputValues.forEach((inputValue, index) => {\r\n        inputFields.push(this.createInputField(inputValue, index));\r\n      });\r\n    }\r\n    return inputFields;\r\n  };\r\n  /**\r\n   * Create a single inputfield, either a checkbox or an inputfield\r\n   */\r\n  createInputField = (inputValue, index) => {\r\n    if (inputValue.inputType === InputTypes.boolean) {\r\n      return (\r\n        <div key={index}>\r\n          {inputValue.inputName}\r\n          <input\r\n            type={\"checkbox\"}\r\n            checked={this.state.inputs[index]}\r\n            onChange={() =>\r\n              this.setState(prevState => {\r\n                const inputs = prevState.inputs;\r\n                inputs.splice(index, 1, !inputs[index]);\r\n                return { inputs: inputs };\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div key={index}>\r\n          {inputValue.inputName}\r\n          <input\r\n            type={\"text\"}\r\n            value={this.state.inputs[index]}\r\n            onChange={event => this.handleInputValue(event, index, inputValue)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Validates if the user input is non-empty and of correct type.\r\n   * If not, replaces value with the default value, or an empty string if no default\r\n   */\r\n  handleInputValue = (event, index, inputValue) => {\r\n    const value = event.target.value;\r\n    this.setState(prevState => {\r\n      let newValue;\r\n      switch (inputValue.inputType) {\r\n        case InputTypes.number:\r\n          newValue = validateNumberInput(value, inputValue.defaultInput);\r\n          break;\r\n        case InputTypes.string:\r\n          newValue = String(value).length > 0 ? value : inputValue.defaultInput;\r\n          break;\r\n        default:\r\n          newValue = inputValue.defaultInput;\r\n      }\r\n      const inputs = prevState.inputs;\r\n      inputs.splice(index, 1, newValue);\r\n      return { inputs: inputs };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Creates drag-drop fields for layers, by amount specified in operation\r\n   */\r\n  createLayerFields = () => {\r\n    const inputFields = [];\r\n    for (let i = 0; i < this.props.operation.inputLayers; i++) {\r\n      inputFields.push(\r\n        <ProcessingField\r\n          key={i}\r\n          index={i}\r\n          inputLayers={this.props.operation.inputLayers}\r\n          layer={this.state.layers[i]}\r\n          onSwap={this.handleSwap}\r\n          onDrop={this.handleDrop}\r\n        />\r\n      );\r\n    }\r\n    return inputFields;\r\n  };\r\n  /**\r\n   * Handles dropping of a layer. If it already exists, move the layer to the new position,\r\n   * and swap places if a layer is already there.\r\n   * If new layer, replace the layer currently on that index\r\n   * @param {Object} layer The dropped layer\r\n   * @param {Number} index The new index of the layer\r\n   */\r\n  handleDrop = (layer, index) => {\r\n    this.setState(prevState => {\r\n      const position = this.checkLayers(layer.id, prevState.layers);\r\n      let layers;\r\n      if (position > -1) {\r\n        layers = this.handleSwap(position, index, prevState.layers);\r\n      } else {\r\n        layers = prevState.layers;\r\n        layers.splice(index, 1, layer);\r\n      }\r\n      return { layers: layers };\r\n    });\r\n  };\r\n  /**\r\n   * If layer with id already exists, return index of the layer\r\n   */\r\n  checkLayers = (id, layers) => {\r\n    return layers.indexOf(\r\n      layers.find(layer => layer !== null && layer.id === id)\r\n    );\r\n  };\r\n  /**\r\n   * Swaps positions of two layers\r\n   */\r\n  handleSwap = (currentIndex, nextIndex, layers) => {\r\n    const layer = layers[currentIndex];\r\n    layers.splice(currentIndex, 1, layers[nextIndex]);\r\n    layers.splice(nextIndex, 1, layer);\r\n    return layers;\r\n  };\r\n\r\n  /**\r\n   * Resets state to default values. Empty for layers, default values for inputs\r\n   */\r\n  handleReset = () => {\r\n    this.setState(() => {\r\n      const defaultInputs = this.getDefaultValues(\r\n        this.props.operation.inputValues\r\n      );\r\n      return {\r\n        layers: new Array(this.props.operation.inputLayers).fill(null),\r\n        inputs: defaultInputs,\r\n        processing: false\r\n      };\r\n    });\r\n  };\r\n  /**\r\n   * Checks if processing can start.\r\n   * Can start if not already processing, if no layer fields are empty,\r\n   * and if all inputs are valid\r\n   */\r\n  processingStart = () => {\r\n    const { layers, inputs } = this.state;\r\n    const { operation } = this.props;\r\n    if (layers.find(layer => layer === null) === undefined) {\r\n      let canProcess = true;\r\n      if (operation.inputValues) {\r\n        operation.inputValues.forEach((inputValue, index) => {\r\n          //Input must be non-null, non-empty, and of correct type\r\n          if (\r\n            inputs[index] === null ||\r\n            String(inputs[index]).length === 0 ||\r\n            typeof inputs[index] !== inputValue.inputType\r\n          ) {\r\n            canProcess = false;\r\n          }\r\n        });\r\n      }\r\n      if (canProcess) {\r\n        this.props.popup\r\n          ? this.openPopup(layers, inputs)\r\n          : this.startProcessing(layers, inputs);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Starts processing without popup\r\n   */\r\n  startProcessing = (layers, inputs) => {\r\n    this.setState({\r\n      processing: true\r\n    });\r\n    const layer = this.props.operation.script(layers, inputs);\r\n    this.processFinished(layer);\r\n  };\r\n  /**\r\n   * Opens the popup processing window\r\n   */\r\n  openPopup = () => {\r\n    this.setState({\r\n      processing: true\r\n    });\r\n  };\r\n  /**\r\n   * Callback for when processing is done. Adds the layer to the map,\r\n   * and resets all inputs for the operation\r\n   */\r\n  processFinished = layer => {\r\n    if (layer !== null) {\r\n      this.props.onProcessingDone(layer);\r\n    } else {\r\n      alert(\"The processed area is empty\");\r\n    }\r\n    this.handleReset();\r\n  };\r\n  closePopup = () => {\r\n    this.setState({ processing: false });\r\n  };\r\n\r\n  /**\r\n   * Render function\r\n   * The popup is only created if this type of operation needs a seperate window\r\n   * Creates layer and inputfields based on operation specifications\r\n   * Creates reset button and start button for processing. Start button is greyed out if\r\n   * a process is ongoing.\r\n   */\r\n  render() {\r\n    const { listOpen, popup } = this.props;\r\n    const PopupComponent = popup ? this.props.operation.popupComponent : \"div\";\r\n    return (\r\n      <div className=\"template\">\r\n        <Popup\r\n          open={popup && this.state.processing}\r\n          modal\r\n          onClose={this.closePopup}\r\n        >\r\n          <PopupComponent\r\n            layers={this.state.layers}\r\n            inputs={this.state.inputs}\r\n            onExecute={this.processFinished}\r\n            onClose={this.closePopup}\r\n          />\r\n        </Popup>\r\n        <div onClick={() => this.props.onToggle(this.props.operation.name)}>\r\n          {this.props.operation.name}\r\n          {this.props.operation.info && (\r\n            <Popup\r\n              trigger={<img src={infoIcon} className=\"info-icon\" alt=\"\" />}\r\n              position=\"right top\"\r\n              on=\"hover\"\r\n            >\r\n              <img\r\n                style={{ width: \"300px\" }}\r\n                src={this.props.operation.info}\r\n                alt=\"\"\r\n              />\r\n            </Popup>\r\n          )}\r\n        </div>\r\n        {listOpen && (\r\n          <div>\r\n            {this.createLayerFields()}\r\n            {this.createInputFields()}\r\n            <button\r\n              onClick={() => this.handleReset()}\r\n              disabled={this.state.processing}\r\n            >\r\n              Clear\r\n            </button>\r\n            <button\r\n              onClick={() => this.processingStart()}\r\n              disabled={this.state.processing}\r\n            >\r\n              Start\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProcessingTemplate.propTypes = {\r\n  operation: PropTypes.shape(OperationShape).isRequired,\r\n  layer: PropTypes.shape(LayerShape),\r\n  onProcessingDone: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n  processing: PropTypes.bool\r\n};\r\n\r\nexport default ProcessingTemplate;\r\n","import React, { Component } from \"react\";\r\nimport { InputTypes } from \"../util/constants\";\r\nimport \"../css/processing.css\";\r\nimport \"../css/sidebar.css\";\r\nimport deleteIcon from \"../../images/icondelete.svg\";\r\n\r\n/**\r\n * The ways property values can be compared when selecting data from layerfiles.\r\n */\r\nexport const ComparisonMethods = {\r\n  equal: \"is Equal to\",\r\n  notEqual: \"is not Equal to\",\r\n  greater: \"is Greater than\",\r\n  less: \"is Less than\",\r\n  greaterEqual: \"is Greater or Equal to\",\r\n  lessEqual: \"is Less or Equal to\"\r\n};\r\n/**\r\n * The datatypes in the three drop down menus\r\n */\r\nexport const AttributeType = {\r\n  property: \"property\",\r\n  operator: \"operator\",\r\n  value: \"value\"\r\n};\r\n/**\r\n * Class for selecting specific attributes from a layer and creating a new layer from them\r\n */\r\nclass AttributeSelector extends Component {\r\n  /**\r\n   * Datatypes:\r\n   * @param {Array} filters: Array of objects. Objects contain: property, operator, comparison value\r\n   * @param {Object} properties: Object with arrays. Keys are properties, values are array of property values\r\n   * @param {Map} datatypes: Map over the datatype each property contains\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filters: [],\r\n      properties: {},\r\n      dataTypes: new Map(),\r\n      processing: false,\r\n      name: \"\"\r\n    };\r\n  }\r\n  /**\r\n   * Analyse values in the inputlayer, create an initial selectField\r\n   */\r\n  componentDidMount() {\r\n    this.loadAttributes();\r\n    this.addSelectField();\r\n  }\r\n  /**\r\n   * Go through each feature in the layer data, find all property types\r\n   * and add the property type and its possible values to a list.\r\n   */\r\n  loadAttributes = () => {\r\n    const layer = this.props.layers[0];\r\n    const properties = {};\r\n    for (let featureID in layer.data.features) {\r\n      const feature = layer.data.features[featureID];\r\n      for (let property in feature.properties) {\r\n        const newValue = feature.properties[property];\r\n        //Check if 'property' has been added before\r\n        if (property in properties) {\r\n          //Check if the new value has not been added before\r\n          if (properties[property].indexOf(newValue) === -1) {\r\n            properties[property].push(newValue);\r\n          }\r\n        }\r\n        //Initialize a list containing the possible values for 'property'\r\n        else {\r\n          properties[property] = [newValue];\r\n          this.setDataType(property, newValue);\r\n        }\r\n      }\r\n    }\r\n    this.setState({ properties: properties });\r\n  };\r\n  /**\r\n   * Set the datatype for each property. Can be string or number.\r\n   * Is used to determine which operators the user can use, ie: <, > may only be used on numbers\r\n   * @param {} property Property field from layer. Ex: \"road type\", \"water depth\".\r\n   * @param {} value Corresponding value of the property field. Ex: \"highway\", \"15\".\r\n   */\r\n  setDataType = (property, value) => {\r\n    let type = null;\r\n    if (!isNaN(value)) {\r\n      type = InputTypes.number;\r\n    } else {\r\n      type = InputTypes.string;\r\n    }\r\n    this.setState(prevState => {\r\n      return { dataTypes: prevState.dataTypes.set(property, type) };\r\n    });\r\n  };\r\n  /**\r\n   * Goes through the filters the user has chosen and creates a new layer based on them.\r\n   * If the user has entered a name, it is added to the new layer\r\n   */\r\n  onExecute = () => {\r\n    const layer = this.props.layers[0];\r\n    const data = Object.assign({}, layer.data);\r\n    data.features = [];\r\n    for (let featureID in layer.data.features) {\r\n      const feature = layer.data.features[featureID];\r\n      if (this.checkFilters(feature.properties)) {\r\n        data.features.push(feature);\r\n      }\r\n    }\r\n    let newName = this.state.name;\r\n    newName = newName.length > 0 ? newName : \"sp-\" + layer.name;\r\n    const extractedLayer = { name: newName, data: data };\r\n    this.props.onExecute(extractedLayer);\r\n  };\r\n  /**\r\n   * Check if the feature fulfills all selection criteria\r\n   */\r\n  checkFilters = properties => {\r\n    let fulfill = true;\r\n    for (let filterID in this.state.filters) {\r\n      const filter = this.state.filters[filterID];\r\n      if (!this.fulfillCriteria(filter, properties[filter.property])) {\r\n        fulfill = false;\r\n      }\r\n    }\r\n    return fulfill;\r\n  };\r\n  /**\r\n   * Compares the filter value to the inputvalue using the comparison method.\r\n   */\r\n  fulfillCriteria = (filter, value) => {\r\n    switch (filter.operator) {\r\n      case ComparisonMethods.equal:\r\n        return value === filter.value;\r\n      case ComparisonMethods.notEqual:\r\n        return value !== filter.value;\r\n      case ComparisonMethods.greater:\r\n        return value > filter.value;\r\n      case ComparisonMethods.less:\r\n        return value < filter.value;\r\n      case ComparisonMethods.greaterEqual:\r\n        return value >= filter.value;\r\n      case ComparisonMethods.lessEqual:\r\n        return value <= filter.value;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n  /**\r\n   * Cancels the attribute selection without applying any filters\r\n   */\r\n  onCancel = () => {\r\n    this.props.onClose();\r\n  };\r\n  /**\r\n   * Add a new base selectfield to filters. Uses the first available property and its\r\n   * first legal operator and value\r\n   */\r\n  addSelectField = () => {\r\n    this.setState(prevState => {\r\n      const filters = prevState.filters;\r\n      const firstProperty = Object.keys(prevState.properties)[0];\r\n      const filter = this.getFilterForProperty(firstProperty, prevState);\r\n      filters.push(filter);\r\n      return { filters: filters };\r\n    });\r\n  };\r\n  /**\r\n   * Returns a valid filter for a specific property, with\r\n   * the first operator and value as its default values\r\n   */\r\n  getFilterForProperty = (property, prevState) => {\r\n    const filter = {\r\n      property: property,\r\n      operator: this.getLegalComparators(prevState.dataTypes.get(property))[0],\r\n      value: prevState.properties[property][0]\r\n    };\r\n    return filter;\r\n  };\r\n  /**\r\n   * Returns the comparators that can be used on a specific datatype.\r\n   * Strings can only have equals (=) and not equals (!=).\r\n   * Numbers can have all comparison methods\r\n   */\r\n  getLegalComparators = dataType => {\r\n    switch (dataType) {\r\n      case InputTypes.string:\r\n        return [ComparisonMethods.equal, ComparisonMethods.notEqual];\r\n      case InputTypes.number:\r\n        return Object.values(ComparisonMethods);\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  /**\r\n   * User deletes specific filter\r\n   */\r\n  deleteSelection = pos => {\r\n    this.setState(prevState => {\r\n      const filters = prevState.filters;\r\n      filters.splice(pos, 1);\r\n      return { filters: filters };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Handles user input to a filter. Updates a filter object with the new\r\n   * value, according to which AttributeType is is\r\n   */\r\n  handleSelectionUpdate = (event, pos, type) => {\r\n    const newValue = event.target.value;\r\n    this.setState(prevState => {\r\n      const filters = prevState.filters;\r\n      let filter = filters[pos];\r\n      switch (type) {\r\n        //Need to update the property and its possible values\r\n        case AttributeType.property:\r\n          filter = this.getFilterForProperty(newValue, prevState);\r\n          break;\r\n        case AttributeType.operator:\r\n          filter.operator = newValue;\r\n          break;\r\n        case AttributeType.value:\r\n          filter.value = newValue;\r\n          break;\r\n        default:\r\n      }\r\n      filters.splice(pos, 1, filter);\r\n      return { filters: filters };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Creates 3 drop down menus for filtering data from a layer.\r\n   * Menu for Attribute Property, Operator and Value,\r\n   * plus button for deleting the filter\r\n   */\r\n  createSelectFields = () => {\r\n    const selectFields = [];\r\n    const properties = Object.keys(this.state.properties);\r\n    this.state.filters.forEach((filter, position) => {\r\n      const comparators = this.getLegalComparators(\r\n        this.state.dataTypes.get(filter.property)\r\n      );\r\n      const values = this.state.properties[filter.property];\r\n      selectFields.push(\r\n        <div key={position}>\r\n          {this.createSelectField(\r\n            properties,\r\n            filter.property,\r\n            AttributeType.property,\r\n            position\r\n          )}\r\n          {this.createSelectField(\r\n            comparators,\r\n            filter.operator,\r\n            AttributeType.operator,\r\n            position\r\n          )}\r\n          {this.createSelectField(\r\n            values,\r\n            filter.value,\r\n            AttributeType.value,\r\n            position\r\n          )}\r\n          <img\r\n            src={deleteIcon}\r\n            alt=\"\"\r\n            onClick={() => this.deleteSelection(position)}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n    return selectFields;\r\n  };\r\n  /**\r\n   * Creates drop down menu with options from 'valueChoices'\r\n   */\r\n  createSelectField = (valueChoices, defaultChoice, type, pos) => {\r\n    return (\r\n      <select\r\n        key={type}\r\n        value={defaultChoice}\r\n        onChange={event => this.handleSelectionUpdate(event, pos, type)}\r\n      >\r\n        {valueChoices.map((value, index) => (\r\n          <option key={index} value={value}>\r\n            {value}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  };\r\n  handleNameChange = event => {\r\n    const name = event.target.value;\r\n    this.setState({ name: name });\r\n  };\r\n\r\n  /**\r\n   * Render function\r\n   * Contains field for giving a name to the new layer\r\n   * Fields for filtering layer data\r\n   * Button for adding new filters\r\n   * Cancel button and start button\r\n   */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span>Name of new layer: </span>\r\n        <input\r\n          type={\"text\"}\r\n          value={this.state.name}\r\n          onChange={event => this.handleNameChange(event)}\r\n        />\r\n        <span>\r\n          <br />\r\n          Filters:\r\n        </span>\r\n        {this.createSelectFields()}\r\n        <button onClick={this.addSelectField} disabled={this.state.processing}>\r\n          Add filter\r\n        </button>\r\n        <button onClick={this.onCancel} disabled={this.state.processing}>\r\n          Cancel\r\n        </button>\r\n        <button\r\n          onClick={this.onExecute}\r\n          disabled={this.state.processing || this.state.filters.length === 0}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AttributeSelector;\r\n","import { InputTypes } from \"../util/constants.js\";\r\nimport { bufferScript } from \"./buffer.js\";\r\nimport { intersectionScript } from \"./intersection.js\";\r\nimport { unionScript } from \"./union.js\";\r\nimport { differenceScript } from \"./difference\";\r\n\r\nimport bufferImg from \"../../images/buffer.png\";\r\nimport intersectionImg from \"../../images/intersection.png\";\r\nimport unionImg from \"../../images/union.png\";\r\nimport differenceImg from \"../../images/difference.png\";\r\n\r\nimport AttributeSelector from \"./attributeselector\";\r\n\r\n/**\r\n * Array of processing operators that do not need a special window for user input\r\n *\r\n * Format:\r\n * @param {String} name: Name of operation, must be unique\r\n * @param {Number} inputLayers: Inputlayers for the operation. Must be 1 or more\r\n * @param {Array|Null} inputValues: Which extra inputvalues the operation uses. Null if no extra input,\r\n * an array of objects describing the input is othervise\r\n * @param {Function} script: The js function which contains the operation\r\n * @param {Image|Null} info: A descriptive image of the operation. An image link or null if no image\r\n */\r\nexport const operations = [\r\n  {\r\n    name: \"Buffer\",\r\n    inputLayers: 1,\r\n    inputValues: [\r\n      createInputValue(\"Buffer radius\", 100, InputTypes.number),\r\n      createInputValue(\"Dissolve(slow)\", false, InputTypes.boolean)\r\n    ],\r\n    script: bufferScript,\r\n    info: bufferImg\r\n  },\r\n  {\r\n    name: \"Difference\",\r\n    inputLayers: 2,\r\n    inputValues: null,\r\n    script: differenceScript,\r\n    info: differenceImg\r\n  },\r\n  {\r\n    name: \"Intersection\",\r\n    inputLayers: 2,\r\n    inputValues: null,\r\n    script: intersectionScript,\r\n    info: intersectionImg\r\n  },\r\n  {\r\n    name: \"Union(very slow)\",\r\n    inputLayers: 2,\r\n    inputValues: null,\r\n    script: unionScript,\r\n    info: unionImg\r\n  }\r\n];\r\n/**\r\n * Creates objects describing inputvalue fields.\r\n * @param {String} inputName Name of inputvalue\r\n * @param {InputTypes} defaultInput Default value used as inputvalue\r\n * @param {InputTypes} inputType Type of inputvalue\r\n */\r\nfunction createInputValue(inputName, defaultInput, inputType) {\r\n  return {\r\n    inputName: inputName,\r\n    defaultInput: defaultInput,\r\n    inputType: inputType\r\n  };\r\n}\r\n\r\n/**\r\n * Operations needing additional user interaction, like feature extractors.\r\n * Must have a component describing the popupwindow\r\n *\r\n * Format:\r\n * @param {String} name: Name of operation, must be unique\r\n * @param {Number} inputLayers: Inputlayers for the operation. Must be 1 or more\r\n * @param {Array|Null} inputValues: Which extra inputvalues the operation uses. Null if no extra input,\r\n * an array of objects describing the input is othervise\r\n * @param {Function} popupComponent: The jsx component describing the popup window for the operation\r\n * @param {Image|Null} info: A descriptive image of the operation. An image link or null if no image\r\n */\r\nexport const componentOperations = [\r\n  {\r\n    name: \"Select properties\",\r\n    inputLayers: 1,\r\n    inputValues: null,\r\n    popupComponent: AttributeSelector,\r\n    info: null\r\n  }\r\n];\r\n","import { buffer, union } from \"@turf/turf\";\r\n/**\r\n * Adds a buffer around the input layer and returns the new buffered layer.\r\n * @param {Array} layers Array of layers. Contains 1 layer in this operation\r\n * @param {Array|Null} inputs Array of inputs. Containts 2 inputs in this operation\r\n */\r\nexport function bufferScript(layers, inputs) {\r\n  let resultLayer = null;\r\n  const layer = layers[0];\r\n  const bufferValue = inputs[0];\r\n  const shouldDissolve = inputs[1];\r\n  const name = layer.name + \"-buffer-\" + bufferValue + \"m\";\r\n\r\n  let bufferLayer = layer.data;\r\n  bufferLayer = buffer(bufferLayer, bufferValue, {\r\n    units: \"meters\"\r\n  });\r\n  //Take the union of all features in the layer and remove the previous properties,\r\n  //as the do not make sense with dissolved data\r\n  if (shouldDissolve) {\r\n    let dissolvedFeature = Object.assign({}, bufferLayer.features[0]);\r\n    for (let i = 1; i < bufferLayer.features.length; i++) {\r\n      dissolvedFeature = union(dissolvedFeature, bufferLayer.features[i]);\r\n    }\r\n    dissolvedFeature.properties = { geometryChanged: \"yes\" };\r\n    bufferLayer.features = [dissolvedFeature];\r\n  }\r\n\r\n  resultLayer = { name: name, data: bufferLayer };\r\n  return resultLayer;\r\n}\r\n","/**\r\n * Javacript class for finding difference between geojson layers\r\n * Takes two layers and show the area of the first layer, excluding the second layer\r\n */\r\n\r\nimport { difference, buffer } from \"@turf/turf\";\r\n/**\r\n * Takes two layers and returns the part of the first which does not overlap any part of the second\r\n * @param {Array} layers Array of layers. Contains 2 layers in this operation\r\n * @param {Array|Null} inputs Array of inputs. Null in this operation\r\n */\r\nexport function differenceScript(layers, inputs) {\r\n  const layer1 = layers[0];\r\n  const layer2 = layers[1];\r\n  const name = layer1.name + \"-difference-\" + layer2.name;\r\n  const resultLayer = { name: name };\r\n  const resultData = Object.assign({}, layer1.data);\r\n  resultData.features = [];\r\n  let buffer1 = buffer(layer1.data, 0.1, { units: \"meters\" });\r\n  let buffer2 = buffer(layer2.data, 0.1, { units: \"meters\" });\r\n  /**\r\n   * For each feature in layer1, take the difference from all features in layer2.\r\n   * If the result is not null we add the difference to a new layer\r\n   */\r\n  for (let i = 0; i < buffer1.features.length; i++) {\r\n    let nextFeature = Object.assign({}, buffer1.features[i]);\r\n    for (let j = 0; j < buffer2.features.length; j++) {\r\n      nextFeature = difference(nextFeature, buffer2.features[j]);\r\n      if (nextFeature === null) {\r\n        break;\r\n      }\r\n    }\r\n    if (nextFeature !== null) {\r\n      resultData.features.push(nextFeature);\r\n    }\r\n  }\r\n  if (!resultData.features[0]) {\r\n    return null;\r\n  }\r\n  resultLayer.data = resultData;\r\n  return resultLayer;\r\n}\r\n","import { intersect, buffer } from \"@turf/turf\";\r\n/**\r\n * Takes two layers and returns a new layer containing the intersection between them\r\n * @param {Array} layers Array of layers. Contains 2 layers in this operation\r\n * @param {Array|Null} inputs Array of inputs. Null in this operation\r\n */\r\nexport function intersectionScript(layers, inputs) {\r\n  const layer1 = layers[0];\r\n  const layer2 = layers[1];\r\n  const name = layer1.name + \"-intersect-\" + layer2.name;\r\n  const resultLayer = { name: name };\r\n  const resultData = Object.assign({}, layer1.data);\r\n  resultData.features = [];\r\n  //Perform buffer operation to transform data to polygons\r\n  let buffer1 = buffer(layer1.data, 0.1, { units: \"meters\" });\r\n  let buffer2 = buffer(layer2.data, 0.1, { units: \"meters\" });\r\n  /**\r\n   * For each feature in both layers, checks the overlapping area and\r\n   * adds is to a new layer\r\n   */\r\n  for (let i = 0; i < buffer1.features.length; i++) {\r\n    const feature1 = buffer1.features[i];\r\n    for (let j = 0; j < buffer2.features.length; j++) {\r\n      const feature2 = buffer2.features[j];\r\n      const intersectPolygon = intersect(feature1, feature2);\r\n      if (intersectPolygon !== null) {\r\n        resultData.features.push(intersectPolygon);\r\n      }\r\n    }\r\n  }\r\n  if (!resultData.features[0]) {\r\n    return null;\r\n  }\r\n  resultLayer.data = resultData;\r\n  return resultLayer;\r\n}\r\n","/**\r\n * Javacript class for finding intersection between geojson layers\r\n * Takes two layers and returns layer containing intersection\r\n * First input is array of layers\r\n */\r\n\r\nimport { union, buffer } from \"@turf/turf\";\r\n/**\r\n * Takes two layers and merges them\r\n * @param {Array} layers Array of layers. Contains 2 layers in this operation\r\n * @param {Array|Null} inputs Array of inputs. Null in this operation\r\n */\r\nexport function unionScript(layers, inputs) {\r\n  let resultLayer = null;\r\n  const layer1 = layers[0];\r\n  const layer2 = layers[1];\r\n  const name = layer1.name + \"-union-\" + layer2.name;\r\n  let buffer1 = buffer(layer1.data, 0.1, { units: \"meters\" });\r\n  let buffer2 = buffer(layer2.data, 0.1, { units: \"meters\" });\r\n  //Merge all features in layer1\r\n  let feature1 = Object.assign({}, buffer1.features[0]);\r\n  for (let i = 1; i < buffer1.features.length; i++) {\r\n    feature1 = union(feature1, buffer1.features[i]);\r\n  }\r\n  //Merge all features in layer2\r\n  let feature2 = Object.assign({}, buffer2.features[0]);\r\n  for (let i = 1; i < buffer2.features.length; i++) {\r\n    feature2 = union(feature2, buffer2.features[i]);\r\n  }\r\n  //Return the union of the two merged layers\r\n  const unionLayer = union(feature1, feature2);\r\n  resultLayer = { name: name, data: unionLayer };\r\n  return resultLayer;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport SideBar from \"./components/sidebar\";\r\nimport LeafletMap from \"./components/leafletmap\";\r\nimport { getInfo, getColor } from \"./components/util/support.js\";\r\nimport { LayerShape } from \"./components/util/constants.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./App.css\";\r\n\r\nconst DB_NAME = \"gisdb\";\r\nconst LAYER_STORE = \"layers\";\r\n//const GROUP_STORE = \"groups\";\r\nconst DB_VERSION = 1;\r\nvar db;\r\n\r\n/**\r\n * Controller class for website. Responsible for creating all components\r\n * and contains current system state\r\n */\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      layers: [],\r\n      visibility: new Map(),\r\n      styles: new Map()\r\n    };\r\n    this.leafletmap = React.createRef();\r\n  }\r\n  /**\r\n   * Initialize database, retrieve locally saved layers\r\n   */\r\n  componentDidMount() {\r\n    this.dbInit();\r\n  }\r\n  /**\r\n   * Close database connection\r\n   */\r\n  componentWillUnmount() {\r\n    db.close();\r\n  }\r\n  /**\r\n   * Initialize database if not created, and reads saved layers\r\n   */\r\n  dbInit = () => {\r\n    let request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    request.onerror = event => {\r\n      alert(\"Error with indexeddb\");\r\n    };\r\n    //Database is not created, create new\r\n    request.onupgradeneeded = event => {\r\n      request.result.createObjectStore(LAYER_STORE, {\r\n        keyPath: \"id\",\r\n        autoIncrement: true\r\n      });\r\n    };\r\n    request.onsuccess = event => {\r\n      db = request.result;\r\n      this.loadLayers();\r\n    };\r\n  };\r\n  /**\r\n   * Load layers from indexeddb and insert into state\r\n   */\r\n  loadLayers = () => {\r\n    let dbload = db.transaction(LAYER_STORE, \"readonly\");\r\n    let objstore = dbload.objectStore(LAYER_STORE);\r\n\r\n    let request = objstore.getAll();\r\n    request.onsuccess = event => {\r\n      this.addGeoJSONLayer(event.target.result);\r\n    };\r\n  };\r\n  /**\r\n   * Handles uploaded and converted geojson files.\r\n   * Reads content and saves if not empty\r\n   * @param {File} file, geojson file to be read and saved\r\n   */\r\n  handleUpload = files => {\r\n    files.forEach(file => {\r\n      let json = null;\r\n      let reader = new FileReader();\r\n      reader.onload = () => {\r\n        try {\r\n          let datatext = reader.result;\r\n          json = JSON.parse(datatext);\r\n          if (json !== null) {\r\n            let layer = {\r\n              name: file.name.toLowerCase().replace(\".geojson\", \"\"),\r\n              data: json\r\n            };\r\n            this.localSave(layer);\r\n          }\r\n        } catch (ex) {\r\n          alert(\"Error reading json file: \" + ex);\r\n          return;\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Saves file locally, then calls createFromGeoJSON\r\n   * @param {Object} layer Object with processed json data and name\r\n   */\r\n  localSave = layer => {\r\n    let dbsave = db.transaction(LAYER_STORE, \"readwrite\");\r\n    let objstore = dbsave.objectStore(LAYER_STORE);\r\n    let request;\r\n    request = objstore.put(layer);\r\n    request.onsuccess = event => {\r\n      if (layer.id === undefined) {\r\n        layer.id = event.target.result;\r\n        this.addGeoJSONLayer([layer]);\r\n      }\r\n    };\r\n  };\r\n  /**\r\n   * Creates sidebar layer and map layer\r\n   * @param {Layer} layer Layer with name, data and id\r\n   */\r\n  addGeoJSONLayer = layers => {\r\n    layers.forEach(layer => {\r\n      console.log(layer);\r\n      this.setState(prevState => {\r\n        const layers = prevState.layers;\r\n        layers.splice(0, 0, layer);\r\n        let style = prevState.styles.get(layer.id)\r\n          ? prevState.styles.get(layer.id)\r\n          : this.setStyle(layer.id);\r\n        return {\r\n          layers: layers,\r\n          visibility: prevState.visibility.set(layer.id, true),\r\n          styles: prevState.styles.set(layer.id, style)\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set default style for a layer\r\n   */\r\n  setStyle = id => {\r\n    const opacity = 0.8;\r\n    const color = getColor(id);\r\n    const style = { color: color, opacity: opacity };\r\n    return style;\r\n  };\r\n\r\n  /**\r\n   * Delete layer from storage, sidebar and map\r\n   */\r\n  handleDelete = id => {\r\n    this.deleteFromStorage(id);\r\n    this.deleteFromState(id);\r\n    this.deleteFromLeaflet(id);\r\n  };\r\n  /**\r\n   * Zoom in on one layer\r\n   */\r\n  handleZoom = id => {\r\n    this.leafletmap.current.zoomToLayer(id);\r\n  };\r\n  /**\r\n   * Change name of layer, in both current state and in local storage\r\n   */\r\n  handleNameChange = (layer, name) => {\r\n    if (layer.name !== name && name.length > 0) {\r\n      layer.name = name;\r\n      this.localSave(layer);\r\n    }\r\n  };\r\n  /**\r\n   * Change the layer style (color, opacity) if the changes are not null\r\n   */\r\n  handleStyleChange = (id, style) => {\r\n    this.setState(prevState => {\r\n      let { color, opacity } = style;\r\n      const prevStyle = prevState.styles.get(id);\r\n      color = color !== null ? color : prevStyle.color;\r\n      opacity = opacity !== null ? opacity : prevStyle.opacity;\r\n      return {\r\n        styles: prevState.styles.set(id, {\r\n          color: color,\r\n          opacity: opacity\r\n        })\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Delete layer from indexeddb\r\n   */\r\n  deleteFromStorage = id => {\r\n    let dbdelete = db.transaction(LAYER_STORE, \"readwrite\");\r\n    let objstore = dbdelete.objectStore(LAYER_STORE);\r\n    let request = objstore.delete(id);\r\n    request.onsuccess = event => {\r\n      //console.log(\"Deleted \" + id);\r\n    };\r\n  };\r\n  /**\r\n   * Delete layer from state, which in turn deletes it from the sidebar\r\n   */\r\n  deleteFromState = id => {\r\n    this.setState(prevState => {\r\n      const layers = prevState.layers.filter(l => l.id !== id);\r\n      return { layers: layers };\r\n    });\r\n  };\r\n  /**\r\n   * Delete layer from leaflet\r\n   */\r\n  deleteFromLeaflet = id => {\r\n    this.leafletmap.current.removeLayer(id);\r\n  };\r\n  /**\r\n   * There are some error with the layer, ex: invalid geoJSON, it should be deleted\r\n   */\r\n  handleError = id => {\r\n    this.handleDelete(id);\r\n  };\r\n  /**\r\n   * A layer is dragged to a new position, reorder the layers\r\n   */\r\n  handleMove = (id, newIndex) => {\r\n    this.setState(prevState => {\r\n      const layerInfo = getInfo(id, prevState.layers);\r\n      const layers = prevState.layers;\r\n      layers.splice(layerInfo.index, 1);\r\n      layers.splice(newIndex, 0, layerInfo.info);\r\n      return { layers: layers };\r\n    });\r\n  };\r\n  /**\r\n   * Gets a new layer as a result of a processing operation. Saves it locally\r\n   */\r\n  handleProcessing = layer => {\r\n    this.localSave(layer);\r\n  };\r\n  /**\r\n   * The visibility of a layer is toggled\r\n   */\r\n  handleToggle = id => {\r\n    this.setState(prevState => {\r\n      return {\r\n        visibility: prevState.visibility.set(id, !prevState.visibility.get(id))\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render function.\r\n   * Contains Sidebar\r\n   * LeafletMap\r\n   */\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <SideBar\r\n          layerlist={this.state.layers}\r\n          visiblemap={this.state.visibility}\r\n          stylemap={this.state.styles}\r\n          onUpload={this.handleUpload}\r\n          onDelete={this.handleDelete}\r\n          onToggle={this.handleToggle}\r\n          onMove={this.handleMove}\r\n          onZoom={this.handleZoom}\r\n          onNameChange={this.handleNameChange}\r\n          onStyleChange={this.handleStyleChange}\r\n          onProcessingDone={this.handleProcessing}\r\n        />\r\n        <LeafletMap\r\n          ref={this.leafletmap}\r\n          layerlist={this.state.layers}\r\n          visiblemap={this.state.visibility}\r\n          stylemap={this.state.styles}\r\n          onError={this.handleError}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  layers: PropTypes.arrayOf(PropTypes.shape(LayerShape)),\r\n  layer: PropTypes.shape(LayerShape),\r\n  visibility: PropTypes.instanceOf(Map),\r\n  id: PropTypes.number,\r\n  newIndex: PropTypes.number,\r\n  DB_NAME: PropTypes.string,\r\n  LAYER_STORE: PropTypes.string,\r\n  DB_VERSION: PropTypes.number\r\n};\r\n\r\nexport default DragDropContext(HTML5Backend)(App);\r\n","import React, { Component } from \"react\";\r\nimport \"./css/sidebar.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { OperationShape } from \"./util/constants.js\";\r\nimport ProcessingTemplate from \"./processingtemplate\";\r\nimport {\r\n  operations,\r\n  componentOperations\r\n} from \"./processing/operationtypes.js\";\r\n\r\n/**\r\n * Class for listing all operations, and managing their output\r\n */\r\nclass Geoprocessing extends Component {\r\n  state = {\r\n    operations: operations,\r\n    componentOperations: componentOperations,\r\n    listOpen: null\r\n  };\r\n  /**\r\n   * Toggles which operation is expanded. Only one may be expanded at any time\r\n   */\r\n  handleToggle = name => {\r\n    this.setState(prevState => {\r\n      if (prevState.listOpen === name) {\r\n        return { listOpen: null };\r\n      } else {\r\n        return { listOpen: name };\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Create clickable sidebar entity for each operation\r\n   * @param {Object} operation The object describing the operation\r\n   * @param {Boolean} popup If the operation is a whole component, or only a function\r\n   */\r\n  createProcessingTemplate = (operation, popup) => {\r\n    return (\r\n      <ProcessingTemplate\r\n        key={operation.name}\r\n        operation={operation}\r\n        onToggle={this.handleToggle}\r\n        onProcessingDone={this.props.onProcessingDone}\r\n        listOpen={this.state.listOpen === operation.name}\r\n        popup={popup}\r\n      />\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"group-divider\">Geoprocessing</div>\r\n        {this.state.componentOperations.map(operation =>\r\n          this.createProcessingTemplate(operation, true)\r\n        )}\r\n        {this.state.operations.map(operation =>\r\n          this.createProcessingTemplate(operation, false)\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGeoprocessing.propTypes = {\r\n  operations: PropTypes.arrayOf(PropTypes.shape(OperationShape)),\r\n  onProcessingDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Geoprocessing;\r\n","import React, { Component } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport \"./css/sidebar.css\";\r\nimport { ACCEPTED_FILE_TYPES, SHAPE_FORMATS } from \"./util/constants.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Class for the upload button. Can upload geoJSON files\r\n */\r\nclass Upload extends Component {\r\n  /**\r\n   * Checks file type and chooses convertion function.\r\n   * Can convert geoJSON, possibility for adding GML and Shape later\r\n   * @param files, all input files from user\r\n   */\r\n  handleUpload = files => {\r\n    let shapeFiles = [];\r\n    let gmlFiles = [];\r\n    let geoJsonFiles = [];\r\n    files.forEach(file => {\r\n      let filename = file.name.toLowerCase();\r\n      if (filename.length > 0) {\r\n        if (filename.endsWith(\".geojson\")) {\r\n          geoJsonFiles.push(file);\r\n        } else if (filename.endsWith(\".gml\")) {\r\n          gmlFiles.push(file);\r\n        } else if (\r\n          SHAPE_FORMATS.filter(format => filename.endsWith(format)).length > 0\r\n        ) {\r\n          shapeFiles.push(file);\r\n        } else {\r\n          alert(\"Not valid filetype: \" + filename);\r\n        }\r\n      }\r\n    });\r\n    this.props.onUpload(geoJsonFiles);\r\n  };\r\n\r\n  /**\r\n   * Render function\r\n   * Contains a dropzone. Can either be clicked to open field upload dialogue,\r\n   * or can drop files over\r\n   */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dropzone\r\n          className=\"drop-zone\"\r\n          accept={ACCEPTED_FILE_TYPES}\r\n          onDrop={files => {\r\n            this.handleUpload(files);\r\n          }}\r\n        >\r\n          <div>\r\n            Click to upload files. Only geojson files\r\n            {/*, gml and shapefiles*/} can be uploaded\r\n          </div>\r\n        </Dropzone>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpload.propTypes = {\r\n  onUpload: PropTypes.func.isRequired,\r\n  gmlFiles: PropTypes.array,\r\n  shapeFiles: PropTypes.array,\r\n  geoJsonFiles: PropTypes.array,\r\n  ACCEPTED_FILE_TYPES: PropTypes.string,\r\n  SHAPE_FORMATS: PropTypes.array\r\n};\r\n\r\nexport default Upload;\r\n","import React, { Component } from \"react\";\r\nimport LayerList from \"./layerlist\";\r\nimport Geoprocessing from \"./geoprocessing\";\r\nimport Upload from \"./upload\";\r\nimport \"./css/sidebar.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LayerShape } from \"./util/constants\";\r\n\r\n/**\r\n * Class the sidebar. Contains the layers, the operations and the upload file button\r\n */\r\nclass SideBar extends Component {\r\n  /**\r\n   * Render function.\r\n   * Contains list of processing functions\r\n   * List of layers\r\n   * Area for uploading files\r\n   */\r\n  render() {\r\n    return (\r\n      <nav id=\"sidebar\" className=\"navbar bg-light\">\r\n        <Geoprocessing onProcessingDone={this.props.onProcessingDone} />\r\n        <LayerList\r\n          layerlist={this.props.layerlist}\r\n          visiblemap={this.props.visiblemap}\r\n          stylemap={this.props.stylemap}\r\n          onDelete={this.props.onDelete}\r\n          onToggle={this.props.onToggle}\r\n          onMove={this.props.onMove}\r\n          onZoom={this.props.onZoom}\r\n          onNameChange={this.props.onNameChange}\r\n          onStyleChange={this.props.onStyleChange}\r\n        />\r\n        <Upload onUpload={this.props.onUpload} />\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nSideBar.propTypes = {\r\n  layerlist: PropTypes.arrayOf(PropTypes.shape(LayerShape)),\r\n  visiblemap: PropTypes.instanceOf(Map).isRequired,\r\n  onMove: PropTypes.func.isRequired,\r\n  onUpload: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SideBar;\r\n","import React, { Component } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./css/map.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LayerShape } from \"./util/constants.js\";\r\n\r\n/**\r\n * Class for all interactions with the leaflet map\r\n */\r\nclass LeafletMap extends Component {\r\n  state = {\r\n    mapid: \"mapid\",\r\n    center: [63.42, 10.55],\r\n    zoom: 12\r\n  };\r\n\r\n  /**\r\n   * Instantiates the map and the featuregroup containing all layers\r\n   */\r\n  componentDidMount() {\r\n    this.map = this.createMap(this.state.mapid);\r\n    this.featuregroup = L.featureGroup();\r\n    this.featuregroup.addTo(this.map);\r\n  }\r\n  /**\r\n   * Leaflet map constructor with Kartverket basemap\r\n   * @param mapid, id of <div> the map will be placed in\r\n   */\r\n  createMap(mapid) {\r\n    let map = L.map(mapid).setView(this.state.center, this.state.zoom);\r\n    L.tileLayer(\r\n      \"http://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=norges_grunnkart&zoom={z}&x={x}&y={y}\",\r\n      {\r\n        attribution: '<a href=\"http://www.kartverket.no/\">Kartverket</a>'\r\n      }\r\n    ).addTo(map);\r\n    map.zoomControl.setPosition(\"topright\");\r\n\r\n    return map;\r\n  }\r\n  /**\r\n   * When props are updated:\r\n   * Goes through each layer, checks the visibility settings,\r\n   * adds layers and pushes them to the back, starting with the front layers\r\n   */\r\n  componentDidUpdate() {\r\n    this.props.layerlist.forEach(layer => {\r\n      //Layer is visible, add and bring to back\r\n      if (this.props.visiblemap.get(layer.id)) {\r\n        let leaflayer = this.addLayer(layer);\r\n        let style = this.props.stylemap.get(layer.id);\r\n        leaflayer.setStyle({ color: style.color, opacity: style.opacity });\r\n        leaflayer.bringToBack();\r\n      }\r\n      //Layer is not visible, remove\r\n      else {\r\n        this.removeLayer(layer.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  zoomToLayer = id => {\r\n    const layer = this.getLayerById(id);\r\n    this.map.fitBounds(layer.getBounds());\r\n  };\r\n  /**\r\n   * Inserts data as geojson layer. Adds id field for easier identification.\r\n   * If leaflet cannot read the layer, delete it from storage\r\n   * @param {*} layer\r\n   */\r\n  addLayer = layer => {\r\n    let leaflayer = this.getLayerById(layer.id);\r\n    if (leaflayer === undefined) {\r\n      try {\r\n        leaflayer = L.geoJSON(layer.data);\r\n        leaflayer.id = layer.id;\r\n        this.featuregroup.addLayer(leaflayer);\r\n      } catch (e) {\r\n        this.props.onError(layer.id);\r\n      }\r\n    }\r\n    return leaflayer;\r\n  };\r\n  /**\r\n   * Finds and removes layer in feature group with id matching input id\r\n   * @param {*} id\r\n   */\r\n  removeLayer = id => {\r\n    const layer = this.getLayerById(id);\r\n    if (layer !== undefined) {\r\n      this.featuregroup.removeLayer(layer);\r\n    }\r\n  };\r\n  getLayerById = id => {\r\n    return this.featuregroup.getLayers().find(layer => layer.id === id);\r\n  };\r\n  render() {\r\n    return <div id={this.state.mapid} />;\r\n  }\r\n}\r\n\r\nLeafletMap.propTypes = {\r\n  layerlist: PropTypes.arrayOf(PropTypes.shape(LayerShape)),\r\n  visiblemap: PropTypes.instanceOf(Map).isRequired,\r\n  layer: PropTypes.shape(LayerShape),\r\n  map: PropTypes.object\r\n};\r\n\r\nexport default LeafletMap;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/icondelete.d36bd4a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconzoom.c135a649.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconsettings.674d9d35.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconinfo.7d03c90c.svg\";","module.exports = __webpack_public_path__ + \"static/media/buffer.72eaeea6.png\";","module.exports = __webpack_public_path__ + \"static/media/intersection.9866121b.png\";","module.exports = __webpack_public_path__ + \"static/media/union.2f066b4c.png\";","module.exports = __webpack_public_path__ + \"static/media/difference.679a0c19.png\";"],"sourceRoot":""}